////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : ALU.vf
// /___/   /\     Timestamp : 01/25/2022 20:28:07
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/Users/elmal/tutorial/ALU.vf -w C:/Users/elmal/tutorial/ALU.sch
//Design Name: ALU
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module INV4_HXILINX_ALU (O0, O1, O2, O3, I0, I1, I2, I3);
    

   output O0;
   output O1;
   output O2;
   output O3;

   input  I0;
   input  I1;
   input  I2;
   input  I3;

assign O0 = !I0;
assign O1 = !I1;
assign O2 = !I2;
assign O3 = !I3;

endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_ALU (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 1ns / 1ps

module mux4to4_MUSER_ALU(A_mux, 
                         B_mux, 
                         C_mux, 
                         D_mux, 
                         enable, 
                         S_0, 
                         S_1, 
                         Y_out);

    input [3:0] A_mux;
    input [3:0] B_mux;
    input [3:0] C_mux;
    input [3:0] D_mux;
    input [3:0] enable;
    input S_0;
    input S_1;
   output [3:0] Y_out;
   
   
   (* HU_SET = "XLXI_1_0" *) 
   M4_1E_HXILINX_ALU  XLXI_1 (.D0(A_mux[2]), 
                             .D1(B_mux[2]), 
                             .D2(C_mux[2]), 
                             .D3(D_mux[2]), 
                             .E(enable[2]), 
                             .S0(S_0), 
                             .S1(S_1), 
                             .O(Y_out[2]));
   (* HU_SET = "XLXI_6_1" *) 
   M4_1E_HXILINX_ALU  XLXI_6 (.D0(A_mux[3]), 
                             .D1(B_mux[3]), 
                             .D2(C_mux[3]), 
                             .D3(D_mux[3]), 
                             .E(enable[3]), 
                             .S0(S_0), 
                             .S1(S_1), 
                             .O(Y_out[3]));
   (* HU_SET = "XLXI_7_2" *) 
   M4_1E_HXILINX_ALU  XLXI_7 (.D0(A_mux[1]), 
                             .D1(B_mux[1]), 
                             .D2(C_mux[1]), 
                             .D3(D_mux[1]), 
                             .E(enable[1]), 
                             .S0(S_0), 
                             .S1(S_1), 
                             .O(Y_out[1]));
   (* HU_SET = "XLXI_8_3" *) 
   M4_1E_HXILINX_ALU  XLXI_8 (.D0(A_mux[0]), 
                             .D1(B_mux[0]), 
                             .D2(C_mux[0]), 
                             .D3(D_mux[0]), 
                             .E(enable[0]), 
                             .S0(S_0), 
                             .S1(S_1), 
                             .O(Y_out[0]));
endmodule
`timescale 1ns / 1ps

module fulladd_MUSER_ALU(A_in, 
                         B_in, 
                         C_in, 
                         C_out, 
                         S_out);

    input A_in;
    input B_in;
    input C_in;
   output C_out;
   output S_out;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   
   AND2  XLXI_11 (.I0(C_in), 
                 .I1(XLXN_3), 
                 .O(XLXN_1));
   AND2  XLXI_12 (.I0(B_in), 
                 .I1(A_in), 
                 .O(XLXN_2));
   XOR2  XLXI_13 (.I0(C_in), 
                 .I1(XLXN_3), 
                 .O(S_out));
   XOR2  XLXI_14 (.I0(B_in), 
                 .I1(A_in), 
                 .O(XLXN_3));
   OR2  XLXI_15 (.I0(XLXN_2), 
                .I1(XLXN_1), 
                .O(C_out));
endmodule
`timescale 1ns / 1ps

module fulladd4_MUSER_ALU(A_in, 
                          B_in, 
                          C_in, 
                          C_out, 
                          S_out);

    input [3:0] A_in;
    input [3:0] B_in;
    input C_in;
   output C_out;
   output [3:0] S_out;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   
   fulladd_MUSER_ALU  XLXI_1 (.A_in(A_in[0]), 
                             .B_in(B_in[0]), 
                             .C_in(C_in), 
                             .C_out(XLXN_1), 
                             .S_out(S_out[0]));
   fulladd_MUSER_ALU  XLXI_2 (.A_in(A_in[1]), 
                             .B_in(B_in[1]), 
                             .C_in(XLXN_1), 
                             .C_out(XLXN_2), 
                             .S_out(S_out[1]));
   fulladd_MUSER_ALU  XLXI_3 (.A_in(A_in[2]), 
                             .B_in(B_in[2]), 
                             .C_in(XLXN_2), 
                             .C_out(XLXN_3), 
                             .S_out(S_out[2]));
   fulladd_MUSER_ALU  XLXI_4 (.A_in(A_in[3]), 
                             .B_in(B_in[3]), 
                             .C_in(XLXN_3), 
                             .C_out(C_out), 
                             .S_out(S_out[3]));
endmodule
`timescale 1ns / 1ps

module ALU(A_in, 
           B_in, 
           C_inaddition_subtraction, 
           enable, 
           S_1, 
           S0, 
           C_outaddition, 
           C_outsubtr, 
           Y);

    input [3:0] A_in;
    input [3:0] B_in;
    input C_inaddition_subtraction;
    input [3:0] enable;
    input S_1;
    input S0;
   output C_outaddition;
   output C_outsubtr;
   output [3:0] Y;
   
   wire [3:0] A_inv;
   wire [3:0] B_XOR;
   wire [3:0] XLXN_41;
   wire [3:0] XLXN_48;
   wire [3:0] XLXN_49;
   wire C_outaddition_DUMMY;
   
   assign C_outaddition = C_outaddition_DUMMY;
   fulladd4_MUSER_ALU  XLXI_1 (.A_in(A_in[3:0]), 
                              .B_in(B_in[3:0]), 
                              .C_in(C_inaddition_subtraction), 
                              .C_out(C_outaddition_DUMMY), 
                              .S_out(XLXN_48[3:0]));
   fulladd4_MUSER_ALU  XLXI_3 (.A_in(A_in[3:0]), 
                              .B_in(B_XOR[3:0]), 
                              .C_in(S_1), 
                              .C_out(C_outsubtr), 
                              .S_out(XLXN_49[3:0]));
   (* HU_SET = "XLXI_8_4" *) 
   INV4_HXILINX_ALU  XLXI_8 (.I0(A_in[3]), 
                            .I1(A_in[2]), 
                            .I2(A_in[1]), 
                            .I3(A_in[0]), 
                            .O0(A_inv[3]), 
                            .O1(A_inv[2]), 
                            .O2(A_inv[1]), 
                            .O3(A_inv[0]));
   fulladd4_MUSER_ALU  XLXI_10 (.A_in(A_in[3:0]), 
                               .B_in(A_in[3:0]), 
                               .C_in(C_inaddition_subtraction), 
                               .C_out(C_outaddition_DUMMY), 
                               .S_out(XLXN_41[3:0]));
   XOR2  XLXI_19 (.I0(S_1), 
                 .I1(B_in[0]), 
                 .O(B_XOR[0]));
   XOR2  XLXI_20 (.I0(S_1), 
                 .I1(B_in[1]), 
                 .O(B_XOR[1]));
   XOR2  XLXI_21 (.I0(S_1), 
                 .I1(B_in[2]), 
                 .O(B_XOR[2]));
   XOR2  XLXI_22 (.I0(B_in[3]), 
                 .I1(S_1), 
                 .O(B_XOR[3]));
   mux4to4_MUSER_ALU  XLXI_25 (.A_mux(A_inv[3:0]), 
                              .B_mux(XLXN_48[3:0]), 
                              .C_mux(XLXN_49[3:0]), 
                              .D_mux(XLXN_41[3:0]), 
                              .enable(enable[3:0]), 
                              .S_0(S0), 
                              .S_1(S_1), 
                              .Y_out(Y[3:0]));
endmodule
